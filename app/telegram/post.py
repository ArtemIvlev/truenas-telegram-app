import os
import asyncio
import logging
import shutil
from pathlib import Path
from typing import Optional, Dict, List
import random
from datetime import datetime

try:
    from telethon import TelegramClient
    from telethon.errors import SessionPasswordNeededError
    HAS_TELETHON = True
except ImportError:
    HAS_TELETHON = False

from app.config.settings import settings

logger = logging.getLogger(__name__)

def get_session_file():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –∏–∑ SESSION_PATH
    
    Returns:
        str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    local_session = 'tg-post.session'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    if os.path.exists(local_session):
        logger.info(f"–ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {local_session}")
        return local_session
    
    # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º SESSION_PATH
    session_path = settings.SESSION_PATH
    if session_path and os.path.exists(session_path):
        logger.info(f"–ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏–∑ {session_path} –≤ {local_session}")
        try:
            shutil.copy2(session_path, local_session)
            logger.info("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
            return local_session
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {str(e)}")
            return session_path
    
    logger.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: {local_session}")
    return local_session

class TelegramPoster:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: Optional[str] = None, chat_id: Optional[str] = None, 
                 api_id: Optional[str] = None, api_hash: Optional[str] = None):
        self.client = None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ (—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–∑–≤–Ω–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        self.session_file = get_session_file()
        
        # –¢–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ settings
        self.bot_token = bot_token or settings.TELEGRAM_BOT_TOKEN
        self.chat_id = chat_id or settings.TELEGRAM_CHAT_ID
        self.api_id = api_id or settings.TELEGRAM_API_ID
        self.api_hash = api_hash or settings.TELEGRAM_API_HASH
        
    async def init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        if not HAS_TELETHON:
            logger.error("telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
            return False
            
        if not self.bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∏ —á–µ—Ä–µ–∑ env)")
            return False
            
        try:
            # –î–ª—è –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º bot token
            api_id = int(self.api_id) if self.api_id else 0
            api_hash = self.api_hash or ''
            
            if api_id and api_hash:
                self.client = TelegramClient(self.session_file, api_id, api_hash)
                await self.client.start(bot_token=self.bot_token)
                logger.info("Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")
            else:
                logger.warning("API_ID –∏ API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞")
                return False
                
            logger.info("Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def get_random_photos(self, count: int = 1) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        photo_dir = Path(settings.PHOTO_DIR)
        
        if not photo_dir.exists():
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {photo_dir}")
            return []
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'}
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photos = []
        for ext in image_extensions:
            photos.extend(photo_dir.rglob(f'*{ext}'))
            photos.extend(photo_dir.rglob(f'*{ext.upper()}'))
        
        if not photos:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {photo_dir}")
            return []
        
        # –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–æ—Ç–æ
        selected = random.sample(photos, min(count, len(photos)))
        logger.info(f"–í—ã–±—Ä–∞–Ω–æ {len(selected)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ {len(photos)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        return selected
    
    async def post_photo(self, photo_path: Path, caption: Optional[str] = None) -> Dict:
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ Telegram"""
        if not self.client:
            logger.error("Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {'status': 'error', 'error': 'client_not_initialized'}
        
        try:
            if not self.chat_id:
                logger.error("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∏ —á–µ—Ä–µ–∑ env)")
                return {'status': 'error', 'error': 'chat_id_not_configured'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = photo_path.stat().st_size
            max_size = 50 * 1024 * 1024  # 50MB –ª–∏–º–∏—Ç Telegram
            
            if file_size > max_size:
                logger.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} bytes > {max_size} bytes")
                return {'status': 'error', 'error': 'file_too_large'}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            message = await self.client.send_file(
                entity=self.chat_id,
                file=str(photo_path),
                caption=caption or f"üì∏ {photo_path.name}",
            )
            
            logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {photo_path.name}")
            return {
                'status': 'success',
                'message_id': message.id,
                'photo_name': photo_path.name,
                'file_size': file_size
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {photo_path.name}: {e}")
            return {'status': 'error', 'error': str(e)}
    
    async def post_random_photo(self, caption: Optional[str] = None) -> Dict:
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"""
        photos = await self.get_random_photos(1)
        
        if not photos:
            return {'status': 'error', 'error': 'no_photos_found'}
        
        photo = photos[0]
        result = await self.post_photo(photo, caption)
        
        return result
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram"""
        if self.client:
            await self.client.disconnect()
            logger.info("Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_telegram_poster = None

async def get_telegram_poster(bot_token: Optional[str] = None, chat_id: Optional[str] = None, 
                             api_id: Optional[str] = None, api_hash: Optional[str] = None) -> TelegramPoster:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramPoster
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ env)
        chat_id: ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ env) 
        api_id: API ID (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ env)
        api_hash: API Hash (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ env)
    """
    global _telegram_poster
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if any([bot_token, chat_id, api_id, api_hash]):
        _telegram_poster = TelegramPoster(bot_token, chat_id, api_id, api_hash)
        await _telegram_poster.init_client()
    elif _telegram_poster is None:
        _telegram_poster = TelegramPoster()
        await _telegram_poster.init_client()
    
    return _telegram_poster

async def post_random_photo(caption: Optional[str] = None, bot_token: Optional[str] = None, 
                           chat_id: Optional[str] = None) -> Dict:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–¥–æ–º)
    
    Args:
        caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        chat_id: ID —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        poster = await get_telegram_poster(bot_token=bot_token, chat_id=chat_id)
        return await poster.post_random_photo(caption)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ post_random_photo: {e}")
        return {'status': 'error', 'error': str(e)}